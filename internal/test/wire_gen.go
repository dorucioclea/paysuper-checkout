// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package test

import (
	"context"
	"github.com/ProtocolONE/go-core/v2/pkg/config"
	"github.com/ProtocolONE/go-core/v2/pkg/invoker"
	"github.com/ProtocolONE/go-core/v2/pkg/logger"
	"github.com/ProtocolONE/go-core/v2/pkg/metric"
	"github.com/ProtocolONE/go-core/v2/pkg/provider"
	"github.com/ProtocolONE/go-core/v2/pkg/tracing"
	"github.com/paysuper/paysuper-checkout/internal/dispatcher"
	"github.com/paysuper/paysuper-checkout/internal/dispatcher/common"
	"github.com/paysuper/paysuper-checkout/internal/validators"
	"github.com/paysuper/paysuper-checkout/pkg/micro"
	"gopkg.in/go-playground/validator.v9"
	"os"
)

// Injectors from inject.go:

func BuildTestSet(ctx context.Context, settings config.Settings, srv common.Services, observer invoker.Observer) (*TestSet, func(), error) {
	initial := ProviderTestInitial()
	configurator, cleanup, err := config.ProviderTest(initial, observer, settings)
	if err != nil {
		return nil, nil, err
	}
	loggerConfig, cleanup2, err := logger.ProviderCfg(configurator)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	mock, cleanup3, err := logger.ProviderTest(ctx, loggerConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	scope, cleanup4, err := metric.ProviderTest()
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tracer, cleanup5, err := tracing.ProviderTest()
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	awareSet := provider.AwareSet{
		Logger: mock,
		Metric: scope,
		Tracer: tracer,
	}
	commonConfig, cleanup6, err := dispatcher.ProviderGlobalCfg(configurator)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	validatorSet, cleanup7, err := validators.Provider(srv, awareSet)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	validate, cleanup8, err := dispatcher.ProviderValidators(validatorSet)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	testSet, cleanup9, err := ProviderTestSet(initial, awareSet, srv, configurator, commonConfig, validate)
	if err != nil {
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return testSet, func() {
		cleanup9()
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func BuildDispatcher(ctx context.Context, settings config.Settings, srv common.Services, handlers common.Handlers, observer invoker.Observer) (*dispatcher.Dispatcher, func(), error) {
	initial := ProviderTestInitial()
	configurator, cleanup, err := config.ProviderTest(initial, observer, settings)
	if err != nil {
		return nil, nil, err
	}
	loggerConfig, cleanup2, err := logger.ProviderCfg(configurator)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	mock, cleanup3, err := logger.ProviderTest(ctx, loggerConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	scope, cleanup4, err := metric.ProviderTest()
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tracer, cleanup5, err := tracing.ProviderTest()
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	awareSet := provider.AwareSet{
		Logger: mock,
		Metric: scope,
		Tracer: tracer,
	}
	commonConfig, cleanup6, err := dispatcher.ProviderGlobalCfg(configurator)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	appSet := dispatcher.AppSet{
		Handlers: handlers,
		Services: srv,
	}
	dispatcherConfig, cleanup7, err := dispatcher.ProviderCfg(configurator)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	microConfig, cleanup8, err := micro.CfgTest()
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	microMicro, cleanup9, err := micro.ProviderTest(ctx, awareSet, microConfig)
	if err != nil {
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dispatcherDispatcher, cleanup10, err := dispatcher.ProviderDispatcher(ctx, awareSet, appSet, dispatcherConfig, commonConfig, microMicro)
	if err != nil {
		cleanup9()
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return dispatcherDispatcher, func() {
		cleanup10()
		cleanup9()
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// inject.go:

type TestSet struct {
	AwareSet     provider.AwareSet
	Configurator config.Configurator
	GlobalConfig *common.Config
	HandlerSet   common.HandlerSet
	Initial      config.Initial
}

// ProviderTestSet
func ProviderTestSet(initial config.Initial, awareSet provider.AwareSet, srv common.Services, configurator config.Configurator, globalConfig *common.Config, validate *validator.Validate) (*TestSet, func(), error) {
	t := &TestSet{
		AwareSet:     awareSet,
		Configurator: configurator,
		GlobalConfig: globalConfig,
		HandlerSet: common.HandlerSet{
			AwareSet: awareSet,
			Validate: validate,
			Services: srv,
		},
		Initial: initial,
	}
	return t, func() {}, nil
}

// ProviderTestInitial
func ProviderTestInitial() config.Initial {
	wd := os.Getenv("WD")
	if len(wd) == 0 {
		wd = "./../../"
	}
	return config.Initial{WorkDir: wd}
}
